REGISTRY ?= quay.io
REGISTRY_ORG ?= ai-lab

APP_IMAGE ?= $(REGISTRY)/$(IMAGE_NAME)
CHROMADB_IMAGE ?= $(REGISTRY)/$(REGISTRY_ORG)/chromadb:latest
IMAGE_NAME ?= $(REGISTRY_ORG)/${APP}:latest
MODEL_IMAGE ?= $(REGISTRY)/$(REGISTRY_ORG)/mistral-7b-instruct:latest
SERVER_IMAGE ?= $(REGISTRY)/$(REGISTRY_ORG)/llamacpp-python:latest

SSH_PUBKEY ?= $(shell cat ${HOME}/.ssh/id_rsa.pub;)
BOOTC_IMAGE ?= quay.io/$(REGISTRY_ORG)/${APP}-bootc:latest

FROM ?=
ARCH ?=

ROOTLESS_AUTH_JSON=${XDG_RUNTIME_DIR}/containers/auth.json
ROOTFUL_AUTH_JSON=/run/containers/0/auth.json
NONLINUX_AUTH_JSON=${HOME}/.config/containers/auth.json
AUTH_JSON=

ifneq ("$(wildcard $(NONLINUX_AUTH_JSON))","")
	AUTH_JSON=$(NONINUX_AUTH_JSON);
else ifneq ("$(wildcard $(ROOTLESS_AUTH_JSON))","")
	AUTH_JSON=$(ROOTLESS_AUTH_JSON);
else ifneq ("$(wildcard $(ROOTFUL_AUTH_JSON))","")
	AUTH_JSON=$(ROOTFUL_AUTH_JSON);
endif

CHROMEDRIVER_VERSION := 103.0.5060.53
CHROMEDRIVER_MIRROR := https://chromedriver.storage.googleapis.com
CHROMEDRIVER_DOWNLOAD_PATH := 
CHROMEDRIVER_INSTALLATION_PATH ?=

OS := $(shell uname -s)
ARCH := $(shell uname -m)

ifeq ($(OS),Darwin) # This structure may vary if we upgrade chromedriver, see index: https://chromedriver.storage.googleapis.com/index.html
	ifeq ($(ARCH),amd64)
		CHROMEDRIVER_DOWNLOAD_PATH := chromedriver_mac64.zip
	else ifeq ($(ARCH),arm64)
		CHROMEDRIVER_DOWNLOAD_PATH := chromedriver_mac64_m1.zip
	endif
else ifeq ($(OS),Linux)
	CHROMEDRIVER_DOWNLOAD_PATH := chromedriver_linux64.zip
endif

CHROMEDRIVER_EXISTS ?= $(shell command -v chromedriver)
LOCAL_CHROMEDRIVER_EXISTS ?= $(shell command -v $(CHROMEDRIVER_INSTALLATION_PATH)/chromedriver)
UNZIP_EXISTS ?= $(shell command -v unzip)

.PHONY: build
build:
	podman build --squash-all $${ARCH:+--arch $${ARCH}} $${FROM:+--from $${FROM}} -f builds/Containerfile -t ${APP_IMAGE} .

.PHONY: bootc
bootc: quadlet
	podman build \
	  $${ARCH:+--arch $${ARCH}} \
	  $${FROM:+--from $${FROM}} \
	  $${AUTH_JSON:+-v $${AUTH_JSON}:/run/containers/0/auth.json} \
	  --cap-add SYS_ADMIN \
	  --build-arg MODEL_IMAGE=$(MODEL_IMAGE) \
	  --build-arg APP_IMAGE=$(APP_IMAGE) \
	  --build-arg SERVER_IMAGE=$(SERVER_IMAGE) \
	  --build-arg "SSHPUBKEY=$(SSHPUBKEY)" \
	  -v /etc/containers/policy.json:/etc/containers/policy.json \
	  -f bootc/Containerfile \
	  -t ${BOOTC_IMAGE} .
	@echo ""
	@echo "Successfully built bootc image '${BOOTC_IMAGE}'."
	@echo "You may now convert the image into a disk image via bootc-image-builder"
	@echo "or the Podman Desktop Bootc Extension.  For more information, please refer to"
	@echo "   * https://github.com/osbuild/bootc-image-builder"
	@echo "   * https://github.com/containers/podman-desktop-extension-bootc"

.PHONY: install-chromedriver
install-chromedriver:
	@if [[ -z "$(CHROMEDRIVER_EXISTS)" ]] && [[ -z "$(LOCAL_CHROMEDRIVER_EXISTS)" ]]; then \
		if [[ -n "$(UNZIP_EXISTS)" ]]; then \
			curl -sLO $(CHROMEDRIVER_MIRROR)/$(CHROMEDRIVER_VERSION)/$(CHROMEDRIVER_DOWNLOAD_PATH); \
			unzip $(CHROMEDRIVER_DOWNLOAD_PATH); \
			mv chromedriver $(CHROMEDRIVER_INSTALLATION_PATH); \
			rm ./$(CHROMEDRIVER_DOWNLOAD_PATH); \
		elif [[ -z "$(UNZIP_EXISTS)" ]]; then \
			echo "Install make target requires unizp binary."; \
		fi; \
	fi;

.PHONY: quadlet
quadlet:
	# Modify quadlet files to match the server, model and app image
	mkdir -p build
	sed -e "s|SERVER_IMAGE|${SERVER_IMAGE}|" \
	    -e "s|APP_IMAGE|${APP_IMAGE}|g" \
	    -e "s|MODEL_IMAGE|${MODEL_IMAGE}|g" \
	    -e "s|CHROMADB_IMAGE|${CHROMADB_IMAGE}|g" \
	    quadlet/${APP}.image \
	    > build/${APP}.image
	sed -e "s|SERVER_IMAGE|${SERVER_IMAGE}|" \
	    -e "s|APP_IMAGE|${APP_IMAGE}|g" \
	    -e "s|MODEL_IMAGE|${MODEL_IMAGE}|g" \
	    -e "s|CHROMADB_IMAGE|${CHROMADB_IMAGE}|g" \
	    quadlet/${APP}.yaml \
	    > build/${APP}.yaml
	cp quadlet/${APP}.kube build/${APP}.kube

.PHONY: run
run: 
	podman run -it -p $(PORT):$(PORT) -e MODEL_SERVICE_ENDPOINT=http://10.88.0.1:8001/v1 ${APP_IMAGE}

.PHONY: clean
clean:
	rm -rf build
	-rm -rf tests/__pycache__
